{"version":3,"sources":["index.js"],"names":["model","webcam","labelContainer","maxPredictions","URL","startbutton","document","getElementById","init","tmImage","modelURL","metadataURL","load","getTotalClasses","Webcam","setup","play","i","window","requestAnimationFrame","loop","appendChild","canvas","createElement","predict","update","prediction","classPrediction","className","probability","toFixed","childNodes","innerHTML","addEventListener"],"mappings":";AA6CA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MAzCA,IAEIA,EAAOC,EAAQC,EAAgBC,EAF7BC,EAAM,4DAIRC,EAAcC,SAASC,eAAe,eAI3BC,SAAAA,IAiCf,OAAA,EAAA,MAAA,KAAA,WAAA,SAAA,IAAA,OAjCA,EAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAQkBC,OAPRC,EAAWN,EAAM,aACjBO,EAAcP,EAAM,gBAF9B,EAAA,KAAA,EAQkBK,QAAQG,KAAKF,EAAUC,GARzC,KAAA,EAcUV,OANND,EARJ,EAAA,KASIG,EAAiBH,EAAMa,mBAGV,EACbZ,EAAS,IAAIQ,QAAQK,OAAO,IAAK,KADpB,GAZjB,EAAA,KAAA,GAcUb,EAAOc,QAdjB,KAAA,GAeUd,OAfV,EAAA,KAAA,GAeUA,EAAOe,OAfjB,KAAA,GAqBaC,IALTC,OAAOC,sBAAsBC,GAG7Bd,SAASC,eAAe,oBAAoBc,YAAYpB,EAAOqB,QAC/DpB,EAAiBI,SAASC,eAAe,mBAChCU,EAAI,EAAGA,EAAId,EAAgBc,IAChCf,EAAemB,YAAYf,SAASiB,cAAc,QAtB1D,KAAA,GAAA,IAAA,MAAA,OAAA,EAAA,SAAA,OAiCA,MAAA,KAAA,WAPeH,SAAAA,IAOf,OAAA,EAAA,MAAA,KAAA,WAAA,SAAA,IAAA,OAPA,EAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAEUI,OADNvB,EAAOwB,SADX,EAAA,KAAA,EAEUD,IAFV,KAAA,EAGIN,OAAOC,sBAAsBC,GAHjC,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,OAOA,MAAA,KAAA,WAAeI,SAAAA,IAAf,OAAA,EAAA,MAAA,KAAA,WAAA,SAAA,IAAA,OAAA,EAAA,EAAA,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EAE6BxB,OAF7B,EAAA,KAAA,EAE6BA,EAAMwB,QAAQvB,EAAOqB,QAFlD,KAAA,EAGaL,IADHS,EAFV,EAAA,KAGaT,EAAI,EAAGA,EAAId,EAAgBc,IAC1BU,EACFD,EAAWT,GAAGW,UAAY,KAAOF,EAAWT,GAAGY,YAAYC,QAAQ,GACvE5B,EAAe6B,WAAWd,GAAGe,UAAYL,EANjD,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,OAAA,MAAA,KAAA,WApCAtB,EAAY4B,iBAAiB,QAASzB","file":"src.f87aa4d4.js","sourceRoot":"..\\src","sourcesContent":["// More API functions here:\r\n// https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image\r\n\r\n// the link to your model provided by Teachable Machine export panel\r\nconst URL = \"https://teachablemachine.withgoogle.com/models/0N0ewq47G/\";\r\n\r\nlet model, webcam, labelContainer, maxPredictions;\r\n\r\nvar startbutton = document.getElementById(\"startbutton\");\r\nstartbutton.addEventListener(\"click\", init());\r\n\r\n// Load the image model and setup the webcam\r\nasync function init() {\r\n    const modelURL = URL + \"model.json\";\r\n    const metadataURL = URL + \"metadata.json\";\r\n\r\n    // load the model and metadata\r\n    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\r\n    // or files from your local hard drive\r\n    // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\r\n    model = await tmImage.load(modelURL, metadataURL);\r\n    maxPredictions = model.getTotalClasses();\r\n\r\n    // Convenience function to setup a webcam\r\n    const flip = true; // whether to flip the webcam\r\n    webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip\r\n    await webcam.setup(); // request access to the webcam\r\n    await webcam.play();\r\n    window.requestAnimationFrame(loop);\r\n\r\n    // append elements to the DOM\r\n    document.getElementById(\"webcam-container\").appendChild(webcam.canvas);\r\n    labelContainer = document.getElementById(\"label-container\");\r\n    for (let i = 0; i < maxPredictions; i++) { // and class labels\r\n        labelContainer.appendChild(document.createElement(\"div\"));\r\n    }\r\n}\r\n\r\nasync function loop() {\r\n    webcam.update(); // update the webcam frame\r\n    await predict();\r\n    window.requestAnimationFrame(loop);\r\n}\r\n\r\n// run the webcam image through the image model\r\nasync function predict() {\r\n    // predict can take in an image, video or canvas html element\r\n    const prediction = await model.predict(webcam.canvas);\r\n    for (let i = 0; i < maxPredictions; i++) {\r\n        const classPrediction =\r\n            prediction[i].className + \": \" + prediction[i].probability.toFixed(2);\r\n        labelContainer.childNodes[i].innerHTML = classPrediction;\r\n    }\r\n}"]}