{"id":"../node_modules/@teachablemachine/image/dist/custom-mobilenet.js","dependencies":[{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\custom-mobilenet.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\src\\custom-mobilenet.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\package.json","includedInParent":true,"mtime":1595816498057},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\package.json","includedInParent":true,"mtime":1595807186102},{"name":"@tensorflow/tfjs","loc":{"line":56,"column":21},"parent":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\custom-mobilenet.js","resolved":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@tensorflow\\tfjs\\dist\\tf.esm.js"},{"name":"./utils/tf","loc":{"line":57,"column":19},"parent":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\custom-mobilenet.js","resolved":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\utils\\tf.js"},{"name":"./utils/canvas","loc":{"line":58,"column":23},"parent":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\custom-mobilenet.js","resolved":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\utils\\canvas.js"},{"name":"./version","loc":{"line":59,"column":24},"parent":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\custom-mobilenet.js","resolved":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\version.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar tf_1 = require(\"./utils/tf\");\nvar canvas_1 = require(\"./utils/canvas\");\nvar version_1 = require(\"./version\");\nvar DEFAULT_MOBILENET_VERSION = 1;\nvar DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nvar DEFAULT_TRAINING_LAYER_V2 = \"out_relu\";\nvar DEFAULT_ALPHA_V1 = 0.25;\nvar DEFAULT_ALPHA_V2 = 0.35;\nexports.IMAGE_SIZE = 224;\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nvar fillMetadata = function (data) {\n    // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n    data.packageVersion = data.packageVersion || version_1.version;\n    data.packageName = data.packageName || '@teachablemachine/image';\n    data.timeStamp = data.timeStamp || new Date().toISOString();\n    data.userMetadata = data.userMetadata || {};\n    data.modelName = data.modelName || 'untitled';\n    data.labels = data.labels || [];\n    return data;\n};\n// tslint:disable-next-line:no-any\nvar isMetadata = function (c) {\n    return !!c && Array.isArray(c.labels);\n};\nvar isAlphaValid = function (version, alpha) {\n    if (version === 1) {\n        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2));\n            return DEFAULT_ALPHA_V1;\n        }\n    }\n    else {\n        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2));\n            return DEFAULT_ALPHA_V2;\n        }\n    }\n    return alpha;\n};\nvar parseModelOptions = function (options) {\n    options = options || {};\n    if (options.checkpointUrl && options.trainingLayer) {\n        if (options.alpha || options.version) {\n            console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n        }\n        return [options.checkpointUrl, options.trainingLayer];\n    }\n    else {\n        options.version = options.version || DEFAULT_MOBILENET_VERSION;\n        if (options.version === 1) {\n            options.alpha = options.alpha || DEFAULT_ALPHA_V1;\n            options.alpha = isAlphaValid(options.version, options.alpha);\n            console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n            // exception is alpha of 1 can only be 1.0\n            var alphaString = options.alpha.toFixed(2);\n            if (alphaString === \"1.00\") {\n                alphaString = \"1.0\";\n            }\n            return [\n                // tslint:disable-next-line:max-line-length        \n                \"https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_\" + alphaString + \"_\" + exports.IMAGE_SIZE + \"/model.json\",\n                DEFAULT_TRAINING_LAYER_V1\n            ];\n        }\n        else if (options.version === 2) {\n            options.alpha = options.alpha || DEFAULT_ALPHA_V2;\n            options.alpha = isAlphaValid(options.version, options.alpha);\n            console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n            return [\n                // tslint:disable-next-line:max-line-length        \n                \"https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_\" + options.alpha.toFixed(2) + \"_\" + exports.IMAGE_SIZE + \"_no_top/model.json\",\n                DEFAULT_TRAINING_LAYER_V2\n            ];\n        }\n        else {\n            throw new Error(\"MobileNet V\" + options.version + \" doesn't exist\");\n        }\n    }\n};\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nvar processMetadata = function (metadata) { return __awaiter(void 0, void 0, void 0, function () {\n    var metadataJSON, metadataResponse;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!(typeof metadata === 'string')) return [3 /*break*/, 3];\n                return [4 /*yield*/, fetch(metadata)];\n            case 1:\n                metadataResponse = _a.sent();\n                return [4 /*yield*/, metadataResponse.json()];\n            case 2:\n                metadataJSON = _a.sent();\n                return [3 /*break*/, 4];\n            case 3:\n                if (isMetadata(metadata)) {\n                    metadataJSON = metadata;\n                }\n                else {\n                    throw new Error('Invalid Metadata provided');\n                }\n                _a.label = 4;\n            case 4: return [2 /*return*/, fillMetadata(metadataJSON)];\n        }\n    });\n}); };\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nfunction getTopKClasses(labels, logits, topK) {\n    if (topK === void 0) { topK = 3; }\n    return __awaiter(this, void 0, void 0, function () {\n        var values;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, logits.data()];\n                case 1:\n                    values = _a.sent();\n                    return [2 /*return*/, tf.tidy(function () {\n                            topK = Math.min(topK, values.length);\n                            var valuesAndIndices = [];\n                            for (var i = 0; i < values.length; i++) {\n                                valuesAndIndices.push({ value: values[i], index: i });\n                            }\n                            valuesAndIndices.sort(function (a, b) {\n                                return b.value - a.value;\n                            });\n                            var topkValues = new Float32Array(topK);\n                            var topkIndices = new Int32Array(topK);\n                            for (var i = 0; i < topK; i++) {\n                                topkValues[i] = valuesAndIndices[i].value;\n                                topkIndices[i] = valuesAndIndices[i].index;\n                            }\n                            var topClassesAndProbs = [];\n                            for (var i = 0; i < topkIndices.length; i++) {\n                                topClassesAndProbs.push({\n                                    className: labels[topkIndices[i]],\n                                    probability: topkValues[i]\n                                });\n                            }\n                            return topClassesAndProbs;\n                        })];\n            }\n        });\n    });\n}\nexports.getTopKClasses = getTopKClasses;\nvar CustomMobileNet = /** @class */ (function () {\n    function CustomMobileNet(model, metadata) {\n        this.model = model;\n        this._metadata = fillMetadata(metadata);\n    }\n    Object.defineProperty(CustomMobileNet, \"EXPECTED_IMAGE_SIZE\", {\n        get: function () {\n            return exports.IMAGE_SIZE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CustomMobileNet.prototype.getMetadata = function () {\n        return this._metadata;\n    };\n    /**\n     * get the total number of classes existing within model\n     */\n    CustomMobileNet.prototype.getTotalClasses = function () {\n        var output = this.model.output;\n        var totalClasses = output.shape[1];\n        return totalClasses;\n    };\n    /**\n     * get the model labels\n     */\n    CustomMobileNet.prototype.getClassLabels = function () {\n        return this._metadata.labels;\n    };\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities of the top K classes.\n     * @param image the image to classify\n     * @param maxPredictions the maximum number of classification predictions\n     */\n    CustomMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n        if (maxPredictions === void 0) { maxPredictions = 10; }\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var croppedImage, logits, classes;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n                        logits = tf.tidy(function () {\n                            var captured = tf_1.capture(croppedImage);\n                            return _this.model.predict(captured);\n                        });\n                        return [4 /*yield*/, getTopKClasses(this._metadata.labels, logits, maxPredictions)];\n                    case 1:\n                        classes = _a.sent();\n                        tfjs_1.dispose(logits);\n                        return [2 /*return*/, classes];\n                }\n            });\n        });\n    };\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities for ALL classes.\n     * @param image the image to classify\n     * @param flipped whether to flip the image on X\n     */\n    CustomMobileNet.prototype.predict = function (image, flipped) {\n        if (flipped === void 0) { flipped = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var croppedImage, logits, values, classes, i;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        croppedImage = canvas_1.cropTo(image, exports.IMAGE_SIZE, flipped);\n                        logits = tf.tidy(function () {\n                            var captured = tf_1.capture(croppedImage);\n                            return _this.model.predict(captured);\n                        });\n                        return [4 /*yield*/, logits.data()];\n                    case 1:\n                        values = _a.sent();\n                        classes = [];\n                        for (i = 0; i < values.length; i++) {\n                            classes.push({\n                                className: this._metadata.labels[i],\n                                probability: values[i]\n                            });\n                        }\n                        tfjs_1.dispose(logits);\n                        return [2 /*return*/, classes];\n                }\n            });\n        });\n    };\n    CustomMobileNet.prototype.dispose = function () {\n        this.truncatedModel.dispose();\n    };\n    return CustomMobileNet;\n}());\nexports.CustomMobileNet = CustomMobileNet;\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nfunction loadTruncatedMobileNet(modelOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, checkpointUrl, trainingLayer, mobilenet, layer, truncatedModel, model, layer, truncatedModel, model;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = parseModelOptions(modelOptions), checkpointUrl = _a[0], trainingLayer = _a[1];\n                    return [4 /*yield*/, tf.loadLayersModel(checkpointUrl)];\n                case 1:\n                    mobilenet = _b.sent();\n                    if (modelOptions && modelOptions.version === 1) {\n                        layer = mobilenet.getLayer(trainingLayer);\n                        truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n                        model = tf.sequential();\n                        model.add(truncatedModel);\n                        model.add(tf.layers.flatten());\n                        return [2 /*return*/, model];\n                    }\n                    else {\n                        layer = mobilenet.getLayer(trainingLayer);\n                        truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n                        model = tf.sequential();\n                        model.add(truncatedModel);\n                        model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n                        return [2 /*return*/, model];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.loadTruncatedMobileNet = loadTruncatedMobileNet;\nfunction load(model, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n        var customModel, metadataJSON, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, tf.loadLayersModel(model)];\n                case 1:\n                    customModel = _b.sent();\n                    if (!metadata) return [3 /*break*/, 3];\n                    return [4 /*yield*/, processMetadata(metadata)];\n                case 2:\n                    _a = _b.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    _a = null;\n                    _b.label = 4;\n                case 4:\n                    metadataJSON = _a;\n                    return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n            }\n        });\n    });\n}\nexports.load = load;\nfunction loadFromFiles(model, weights, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n        var customModel, metadataFile, metadataJSON, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, tf.loadLayersModel(tf.io.browserFiles([model, weights]))];\n                case 1:\n                    customModel = _b.sent();\n                    return [4 /*yield*/, new Response(metadata).json()];\n                case 2:\n                    metadataFile = _b.sent();\n                    if (!metadata) return [3 /*break*/, 4];\n                    return [4 /*yield*/, processMetadata(metadataFile)];\n                case 3:\n                    _a = _b.sent();\n                    return [3 /*break*/, 5];\n                case 4:\n                    _a = null;\n                    _b.label = 5;\n                case 5:\n                    metadataJSON = _a;\n                    return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n            }\n        });\n    });\n}\nexports.loadFromFiles = loadFromFiles;\n"},"sourceMaps":{"js":{"version":3,"file":"custom-mobilenet.js","sourceRoot":"","sources":["../src/custom-mobilenet.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\nimport { util, SymbolicTensor } from '@tensorflow/tfjs';\nimport { dispose } from '@tensorflow/tfjs';\nimport { capture } from './utils/tf';\nimport { cropTo } from './utils/canvas';\nimport { version } from './version';\n\nconst DEFAULT_MOBILENET_VERSION = 1;\nconst DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nconst DEFAULT_TRAINING_LAYER_V2 = \"out_relu\"; \nconst DEFAULT_ALPHA_V1 = 0.25;\nconst DEFAULT_ALPHA_V2 = 0.35; \nexport const IMAGE_SIZE = 224;\n\n/**\n * the metadata to describe the model's creation,\n * includes the labels associated with the classes\n * and versioning information from training.\n */\nexport interface Metadata {\n    tfjsVersion: string;\n    tmVersion?: string;\n    packageVersion: string;\n    packageName: string;\n    modelName?: string;\n    timeStamp?: string;\n    labels: string[];\n    userMetadata?: {};\n}\n\nexport interface ModelOptions {\n    version?: number;\n    checkpointUrl?: string;\n    alpha?: number;\n    trainingLayer?: string;\n}\n\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nconst fillMetadata = (data: Partial<Metadata>) => {\n    // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n    data.packageVersion = data.packageVersion || version;\n    data.packageName = data.packageName || '@teachablemachine/image';\n    data.timeStamp = data.timeStamp || new Date().toISOString();\n    data.userMetadata = data.userMetadata || {};\n    data.modelName = data.modelName || 'untitled';\n    data.labels = data.labels || [];\n    return data as Metadata;\n};\n\n// tslint:disable-next-line:no-any\nconst isMetadata = (c: any): c is Metadata =>\n    !!c && Array.isArray(c.labels);\n\nconst isAlphaValid = (version: number, alpha: number) => {\n    if (version === 1) {\n        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2)); \n            return DEFAULT_ALPHA_V1;\n        }\n    }\n    else {\n        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2)); \n            return DEFAULT_ALPHA_V2;\n        }\n    }\n\n    return alpha;\n};\n\nconst parseModelOptions = (options?: ModelOptions) => {\n    options = options || {};\n\n    if (options.checkpointUrl && options.trainingLayer) {\n        if (options.alpha || options.version){\n            console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n        }        \n        return [options.checkpointUrl, options.trainingLayer];\n    } else {\n        options.version = options.version || DEFAULT_MOBILENET_VERSION;\n        \n        if(options.version === 1){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V1;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            // exception is alpha of 1 can only be 1.0\n            let alphaString = options.alpha.toFixed(2);\n            if (alphaString === \"1.00\") { alphaString = \"1.0\"; }\n\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_${alphaString}_${IMAGE_SIZE}/model.json`,\n                DEFAULT_TRAINING_LAYER_V1\n            ];\n        }\n        else if (options.version === 2){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V2;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_${options.alpha.toFixed(2)}_${IMAGE_SIZE}_no_top/model.json`,\n                DEFAULT_TRAINING_LAYER_V2\n            ];\n        } else {\n            throw new Error(`MobileNet V${options.version} doesn't exist`);\n        }   \n    }\n};\n\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nconst processMetadata = async (metadata: string | Metadata) => {\n    let metadataJSON: Metadata;\n    if (typeof metadata === 'string') {\n        const metadataResponse = await fetch(metadata);\n        metadataJSON = await metadataResponse.json();\n    } else if (isMetadata(metadata)) {\n        metadataJSON = metadata;\n    } else {\n        throw new Error('Invalid Metadata provided');\n    }\n    return fillMetadata(metadataJSON);\n};\n\nexport type ClassifierInputSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\n\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nexport async function getTopKClasses(labels: string[], logits: tf.Tensor<tf.Rank>, topK = 3) {\n  const values = await logits.data();\n  return tf.tidy(() => {\n      topK = Math.min(topK, values.length);\n\n      const valuesAndIndices = [];\n      for (let i = 0; i < values.length; i++) {\n          valuesAndIndices.push({value: values[i], index: i});\n      }\n      valuesAndIndices.sort((a, b) => {\n          return b.value - a.value;\n      });\n      const topkValues = new Float32Array(topK);\n      const topkIndices = new Int32Array(topK);\n      for (let i = 0; i < topK; i++) {\n          topkValues[i] = valuesAndIndices[i].value;\n          topkIndices[i] = valuesAndIndices[i].index;\n      }\n\n      const topClassesAndProbs = [];\n      for (let i = 0; i < topkIndices.length; i++) {\n          topClassesAndProbs.push({\n              className: labels[topkIndices[i]], //IMAGENET_CLASSES[topkIndices[i]],\n              probability: topkValues[i]\n          });\n      }\n      return topClassesAndProbs;\n  });\n}\n\n\nexport class CustomMobileNet {\n    /**\n     * the truncated mobilenet model we will train on top of\n     */\n    protected truncatedModel: tf.LayersModel;\n\n    static get EXPECTED_IMAGE_SIZE() {\n        return IMAGE_SIZE;\n    }\n\n    protected _metadata: Metadata;\n    public getMetadata() {\n        return this._metadata;\n    }\n\n    constructor(public model: tf.LayersModel, metadata: Partial<Metadata>) {\n        this._metadata = fillMetadata(metadata);\n    }\n\n    /**\n     * get the total number of classes existing within model\n     */\n    getTotalClasses() {\n        const output = this.model.output as SymbolicTensor;\n        const totalClasses = output.shape[1];\n        return totalClasses;\n    }\n\n    /**\n     * get the model labels\n     */\n    getClassLabels() {\n        return this._metadata.labels;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities of the top K classes.\n     * @param image the image to classify\n     * @param maxPredictions the maximum number of classification predictions\n     */\n    async predictTopK(image: ClassifierInputSource, maxPredictions = 10, flipped = false) {\n        const croppedImage = cropTo(image, IMAGE_SIZE, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage);\n            return this.model.predict(captured);\n        });\n\n        // Convert logits to probabilities and class names.\n        const classes = await getTopKClasses(this._metadata.labels, logits as tf.Tensor<tf.Rank>, maxPredictions);\n        dispose(logits);\n\n        return classes;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities for ALL classes.\n     * @param image the image to classify\n     * @param flipped whether to flip the image on X\n     */\n    async predict(image: ClassifierInputSource, flipped = false) {\n        const croppedImage = cropTo(image, IMAGE_SIZE, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage);\n            return this.model.predict(captured);\n        });\n\n        const values = await (logits as tf.Tensor<tf.Rank>).data();\n\n        const classes = [];\n        for (let i = 0; i < values.length; i++) {\n            classes.push({\n                className: this._metadata.labels[i],\n                probability: values[i]\n            });\n        }\n\n        dispose(logits);\n\n        return classes;\n    }\n\n    public dispose() {\n        this.truncatedModel.dispose();\n    }\n}\n\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nexport async function loadTruncatedMobileNet(modelOptions?: ModelOptions) {\n    const [checkpointUrl, trainingLayer] = parseModelOptions(modelOptions);\n    const mobilenet = await tf.loadLayersModel(checkpointUrl);\n\n    if (modelOptions && modelOptions.version === 1){\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.flatten());\n        return model;\n    }\n    else {\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n        return model;\n    }\n}\n\nexport async function load(model: string, metadata?: string | Metadata ) {\n    const customModel = await tf.loadLayersModel(model);\n    const metadataJSON = metadata ? await processMetadata(metadata) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n\nexport async function loadFromFiles(model: File, weights: File, metadata: File) {\n    const customModel = await tf.loadLayersModel(tf.io.browserFiles([model, weights]));\n    const metadataFile = await new Response(metadata).json();\n    const metadataJSON = metadata ? await processMetadata(metadataFile) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n"]}},"error":null,"hash":"8e162d7d6292bb6b0a30479092b69dfc","cacheData":{"env":{}}}