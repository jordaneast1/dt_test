{"id":"../node_modules/@teachablemachine/image/dist/utils/canvas.js","dependencies":[{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\utils\\canvas.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\src\\utils\\canvas.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\package.json","includedInParent":true,"mtime":1595816498057},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\package.json","includedInParent":true,"mtime":1595807186102}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar newCanvas = function () { return document.createElement('canvas'); };\nfunction resize(image, scale, canvas) {\n    if (canvas === void 0) { canvas = newCanvas(); }\n    canvas.width = image.width * scale;\n    canvas.height = image.height * scale;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\nexports.resize = resize;\nfunction resizeMaxTo(image, maxSize, canvas) {\n    if (canvas === void 0) { canvas = newCanvas(); }\n    var max = Math.max(image.width, image.height);\n    return resize(image, maxSize / max, canvas);\n}\nexports.resizeMaxTo = resizeMaxTo;\nfunction resizeMinTo(image, minSize, canvas) {\n    if (canvas === void 0) { canvas = newCanvas(); }\n    var min = Math.min(image.width, image.height);\n    return resize(image, minSize / min, canvas);\n}\nexports.resizeMinTo = resizeMinTo;\nfunction cropTo(image, size, flipped, canvas) {\n    if (flipped === void 0) { flipped = false; }\n    if (canvas === void 0) { canvas = newCanvas(); }\n    // image image, bitmap, or canvas\n    var width = image.width;\n    var height = image.height;\n    // if video element\n    if (image instanceof HTMLVideoElement) {\n        width = image.videoWidth;\n        height = image.videoHeight;\n    }\n    var min = Math.min(width, height);\n    var scale = size / min;\n    var scaledW = Math.ceil(width * scale);\n    var scaledH = Math.ceil(height * scale);\n    var dx = scaledW - size;\n    var dy = scaledH - size;\n    canvas.width = canvas.height = size;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, ~~(dx / 2) * -1, ~~(dy / 2) * -1, scaledW, scaledH);\n    // canvas is already sized and cropped to center correctly\n    if (flipped) {\n        ctx.scale(-1, 1);\n        ctx.drawImage(canvas, size * -1, 0);\n    }\n    return canvas;\n}\nexports.cropTo = cropTo;\n"},"sourceMaps":{"js":{"version":3,"file":"canvas.js","sourceRoot":"","sources":["../../src/utils/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\ntype Drawable = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\nconst newCanvas = () => document.createElement('canvas');\n\nexport function resize(image: Drawable, scale: number, canvas: HTMLCanvasElement= newCanvas()) {\n    canvas.width = image.width * scale;\n    canvas.height = image.height * scale;\n    const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\n\nexport function resizeMaxTo(image: Drawable, maxSize: number, canvas: HTMLCanvasElement= newCanvas()) {\n    const max = Math.max(image.width, image.height);\n    return resize(image, maxSize / max, canvas);\n}\n\nexport function resizeMinTo(image: Drawable, minSize: number, canvas: HTMLCanvasElement= newCanvas()) {\n    const min = Math.min(image.width, image.height);\n    return resize(image, minSize / min, canvas);\n}\n\n\nexport function cropTo( image: Drawable, size: number,\n    flipped = false, canvas: HTMLCanvasElement = newCanvas()) {\n\n    // image image, bitmap, or canvas\n    let width = image.width;\n    let height = image.height;\n\n    // if video element\n    if (image instanceof HTMLVideoElement) {\n        width = (image as HTMLVideoElement).videoWidth;\n        height = (image as HTMLVideoElement).videoHeight;\n    }\n\n    const min = Math.min(width, height);\n    const scale = size / min;\n    const scaledW = Math.ceil(width * scale);\n    const scaledH = Math.ceil(height * scale);\n    const dx = scaledW - size;\n    const dy = scaledH - size;\n    canvas.width = canvas.height = size;\n    const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n    ctx.drawImage(image, ~~(dx / 2) * -1, ~~(dy / 2) * -1, scaledW, scaledH);\n\n    // canvas is already sized and cropped to center correctly\n    if (flipped) {\n        ctx.scale(-1, 1);\n        ctx.drawImage(canvas, size * -1, 0);\n    }\n\n    return canvas;\n}\n"]}},"error":null,"hash":"9c980f554cc671350d9ba0c4232cb87e","cacheData":{"env":{}}}