{"id":"../node_modules/@teachablemachine/image/dist/utils/tf.js","dependencies":[{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\utils\\tf.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\src\\utils\\tf.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\package.json","includedInParent":true,"mtime":1595816498057},{"name":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\package.json","includedInParent":true,"mtime":1595807186102},{"name":"@tensorflow/tfjs","loc":{"line":19,"column":17},"parent":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@teachablemachine\\image\\dist\\utils\\tf.js","resolved":"C:\\Users\\jeast\\Documents\\Rekordelig\\rekordalig_v1\\node_modules\\@tensorflow\\tfjs\\dist\\tf.esm.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tf = require(\"@tensorflow/tfjs\");\n/**\n * Receives an image and normalizes it between -1 and 1.\n * Returns a batched image (1 - element batch) of shape [1, w, h, c]\n * @param rasterElement the element with pixels to convert to a Tensor\n */\nfunction capture(rasterElement) {\n    return tf.tidy(function () {\n        var pixels = tf.browser.fromPixels(rasterElement);\n        // crop the image so we're using the center square\n        var cropped = cropTensor(pixels);\n        // Expand the outer most dimension so we have a batch size of 1\n        var batchedImage = cropped.expandDims(0);\n        // Normalize the image between -1 and a1. The image comes in between 0-255\n        // so we divide by 127 and subtract 1.\n        return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n    });\n}\nexports.capture = capture;\nfunction cropTensor(img) {\n    var size = Math.min(img.shape[0], img.shape[1]);\n    var centerHeight = img.shape[0] / 2;\n    var beginHeight = centerHeight - (size / 2);\n    var centerWidth = img.shape[1] / 2;\n    var beginWidth = centerWidth - (size / 2);\n    return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n}\nexports.cropTensor = cropTensor;\n"},"sourceMaps":{"js":{"version":3,"file":"tf.js","sourceRoot":"","sources":["../../src/utils/tf.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,qCAAuC;AAEvC;;;;GAIG;AACH,SAAgB,OAAO,CAAC,aAAsE;IAC1F,OAAO,EAAE,CAAC,IAAI,CAAC;QACX,IAAM,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAEpD,kDAAkD;QAClD,IAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;QAEnC,+DAA+D;QAC/D,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAE3C,0EAA0E;QAC1E,sCAAsC;QACtC,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;AACP,CAAC;AAdD,0BAcC;AAGD,SAAgB,UAAU,CAAE,GAAgB;IACxC,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,IAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACtC,IAAM,WAAW,GAAG,YAAY,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAC9C,IAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrC,IAAM,UAAU,GAAG,WAAW,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAC5C,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAPD,gCAOC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\n/**\n * Receives an image and normalizes it between -1 and 1.\n * Returns a batched image (1 - element batch) of shape [1, w, h, c]\n * @param rasterElement the element with pixels to convert to a Tensor\n */\nexport function capture(rasterElement: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement ) {\n    return tf.tidy(() => {\n        const pixels = tf.browser.fromPixels(rasterElement);\n\n        // crop the image so we're using the center square\n        const cropped = cropTensor(pixels);\n\n        // Expand the outer most dimension so we have a batch size of 1\n        const batchedImage = cropped.expandDims(0);\n\n        // Normalize the image between -1 and a1. The image comes in between 0-255\n        // so we divide by 127 and subtract 1.\n        return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n    });\n}\n\n\nexport function cropTensor( img: tf.Tensor3D ) : tf.Tensor3D {\n    const size = Math.min(img.shape[0], img.shape[1]);\n    const centerHeight = img.shape[0] / 2;\n    const beginHeight = centerHeight - (size / 2);\n    const centerWidth = img.shape[1] / 2;\n    const beginWidth = centerWidth - (size / 2);\n    return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n}\n"]}},"error":null,"hash":"21d2cedee6f9cd1c5643b8b8c1aba5bb","cacheData":{"env":{}}}